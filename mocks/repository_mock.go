// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/storage/in_database_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/FeelDat/urlshort/internal/app/models"
	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteURLS mocks base method.
func (m *MockRepository) DeleteURLS(ctx context.Context, userID string, shortLink []string, logger *zap.SugaredLogger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteURLS", ctx, userID, shortLink, logger)
}

// DeleteURLS indicates an expected call of DeleteURLS.
func (mr *MockRepositoryMockRecorder) DeleteURLS(ctx, userID, shortLink, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLS", reflect.TypeOf((*MockRepository)(nil).DeleteURLS), ctx, userID, shortLink, logger)
}

// GetFullURL mocks base method.
func (m *MockRepository) GetFullURL(ctx context.Context, shortLink string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullURL", ctx, shortLink)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullURL indicates an expected call of GetFullURL.
func (mr *MockRepositoryMockRecorder) GetFullURL(ctx, shortLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullURL", reflect.TypeOf((*MockRepository)(nil).GetFullURL), ctx, shortLink)
}

// GetUsersURLS mocks base method.
func (m *MockRepository) GetUsersURLS(ctx context.Context, userID, baseAddr string) ([]models.UsersURLS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersURLS", ctx, userID, baseAddr)
	ret0, _ := ret[0].([]models.UsersURLS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersURLS indicates an expected call of GetUsersURLS.
func (mr *MockRepositoryMockRecorder) GetUsersURLS(ctx, userID, baseAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersURLS", reflect.TypeOf((*MockRepository)(nil).GetUsersURLS), ctx, userID, baseAddr)
}

// ShortenURL mocks base method.
func (m *MockRepository) ShortenURL(ctx context.Context, fullLink string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenURL", ctx, fullLink)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenURL indicates an expected call of ShortenURL.
func (mr *MockRepositoryMockRecorder) ShortenURL(ctx, fullLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenURL", reflect.TypeOf((*MockRepository)(nil).ShortenURL), ctx, fullLink)
}

// ShortenURLBatch mocks base method.
func (m *MockRepository) ShortenURLBatch(ctx context.Context, batch []models.URLBatchRequest, baseAddr string) ([]models.URLRBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenURLBatch", ctx, batch, baseAddr)
	ret0, _ := ret[0].([]models.URLRBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenURLBatch indicates an expected call of ShortenURLBatch.
func (mr *MockRepositoryMockRecorder) ShortenURLBatch(ctx, batch, baseAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenURLBatch", reflect.TypeOf((*MockRepository)(nil).ShortenURLBatch), ctx, batch, baseAddr)
}
